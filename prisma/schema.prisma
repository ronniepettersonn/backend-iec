// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id             String    @id @default(uuid())
  fullName       String
  email          String?   @unique
  phone          String?
  birthDate      DateTime?
  baptismDate    DateTime?
  conversionDate DateTime?
  address        String?
  city           String?
  state          String?
  role           String? // Ex: membro, líder, pastor
  maritalStatus  String? // Ex: solteiro, casado
  avatarUrl      String?
  status         String    @default("ATIVO")
  notes          String?

  emergencyContactName  String? // nome do contato de emergência
  emergencyContactPhone String? // telefone do contato de emergência

  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  joinDate  DateTime @default(now())
  user      User?    @relation

  ministries Ministry[] @relation("MinistryMembers")
  schedules  Schedule[] @relation("ScheduleMembers")

  preacherInSchedules CultSchedule[] @relation("PreacherSchedule")
  directorInSchedules CultSchedule[] @relation("DirectorSchedule")

  appointments      AppointmentMember[]
  AccountReceivable AccountReceivable[]
  Cult              Cult[]

  preachedCults Cult[] @relation("CultPreacher")
  directedCults Cult[] @relation("CultDirector")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  passwordHash     String
  avatar           String?
  role             Role      @default(MEMBER)
  createdAt        DateTime  @default(now())
  active           Boolean   @default(true)
  firstLogin       Boolean   @default(true)
  resetToken       String?
  resetTokenExpiry DateTime?

  member   Member? @relation(fields: [memberId], references: [id])
  memberId String? @unique

  transactions  Transaction[]
  ministriesLed Ministry[]    @relation("MinistryLeader")

  Event Event[]

  Visitor Visitor[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  Notice Notice[]

  Notification Notification[]

  Appointment Appointment[]

  PasswordResetToken PasswordResetToken[]

  EmailsSent        Email[]             @relation("EmailsSent")
  EmailMessagesSent EmailMessage[]      @relation("EmailMessagesSent")
  EmailRecipient    EmailRecipient[]
  AccountPayable    AccountPayable[]
  LogEntry          LogEntry[]
  AccountReceivable AccountReceivable[]
}

enum Role {
  ADMIN
  LEADER
  MEMBER
  PASTOR
}

model Transaction {
  id          String          @id @default(uuid())
  date        DateTime
  createdById String
  createdBy   User            @relation(fields: [createdById], references: [id])
  type        TransactionType
  description String
  amount      Float

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  recurrenceId String?
  recurrence   Recurrence? @relation(fields: [recurrenceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dailyCashId String?
  dailyCash   DailyCash? @relation(fields: [dailyCashId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Schedule {
  id         String   @id @default(uuid())
  ministryId String
  ministry   Ministry @relation(fields: [ministryId], references: [id])
  date       DateTime
  location   String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members Member[] @relation("ScheduleMembers")
}

model Ministry {
  id          String     @id @default(uuid())
  name        String
  leaderId    String?
  description String?
  leader      User?      @relation("MinistryLeader", fields: [leaderId], references: [id])
  members     Member[]   @relation("MinistryMembers")
  schedules   Schedule[]
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Visitor {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  notes     String?
  visitDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wasContacted  Boolean   @default(false)
  contactedAt   DateTime?
  contactNotes  String?
  contactedById String?
  contactedBy   User?     @relation(fields: [contactedById], references: [id])

  active Boolean @default(true)
}

model Message {
  id         String    @id @default(uuid())
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  read       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  readAt     DateTime?
}

model Notice {
  id          String    @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  content       String
  target        String?
  image         String?
  type          Int      @default(1)
  location      String   @default("")
  locationLabel String   @default("")
  status        String   @default("")
  read          Boolean  @default(false)
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Appointment {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  //attendees   Member[] // relação many-to-many implícita
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attendees AppointmentMember[]
}

model AppointmentMember {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String

  member   Member @relation(fields: [memberId], references: [id])
  memberId String

  confirmed   Boolean   @default(false)
  confirmedAt DateTime?

  @@unique([appointmentId, memberId])
}

model Permission {
  id        String           @id @default(uuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  roles     RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Email {
  id         String           @id @default(uuid())
  sender     User             @relation("EmailsSent", fields: [senderId], references: [id])
  senderId   String
  subject    String
  createdAt  DateTime         @default(now())
  starred    Boolean          @default(false)
  flagged    Boolean          @default(false)
  group      String           @default("inbox")
  messages   EmailMessage[]
  recipients EmailRecipient[]
}

model EmailMessage {
  id          String       @id @default(uuid())
  email       Email        @relation(fields: [emailId], references: [id])
  emailId     String
  sender      User         @relation("EmailMessagesSent", fields: [senderId], references: [id])
  senderId    String
  content     String
  createdAt   DateTime     @default(now())
  attachments Attachment[]
}

model Attachment {
  id        String       @id @default(uuid())
  file      String
  type      String
  size      String
  message   EmailMessage @relation(fields: [messageId], references: [id])
  messageId String
}

model EmailRecipient {
  id      String    @id @default(uuid())
  email   Email     @relation(fields: [emailId], references: [id])
  emailId String
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  read    Boolean   @default(false)
  flagged Boolean   @default(false)
  starred Boolean   @default(false)
  readAt  DateTime?
  label   String?
  group   String

  @@unique([emailId, userId])
}

model Cult {
  id     String   @id @default(uuid())
  date   DateTime
  typeId String
  type   CultType @relation(fields: [typeId], references: [id])

  theme    String?
  location String?

  preacherId String?
  preacher   Member? @relation("CultPreacher", fields: [preacherId], references: [id])

  directorId String?
  director   Member? @relation("CultDirector", fields: [directorId], references: [id])

  totalPeople        Int?
  visitors           Int?
  children           Int?
  saved              Int?
  healed             Int?
  holySpiritBaptisms Int?

  tithesAmount        Float?
  tithesCount         Int?
  offeringsAmount     Float?
  offeringsCount      Int?
  designatedOfferings Json?

  notes String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  schedule CultSchedule[]

  Member Member[]
}

model CultType {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cults Cult[]
}

model CultSchedule {
  id     String @id @default(uuid())
  cultId String
  cult   Cult   @relation(fields: [cultId], references: [id])

  preacherId String?
  preacher   Member? @relation("PreacherSchedule", fields: [preacherId], references: [id])

  directorId String?
  director   Member? @relation("DirectorSchedule", fields: [directorId], references: [id])

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?

  type TransactionType

  transactions Transaction[]

  Recurrence        Recurrence[]
  AccountPayable    AccountPayable[]
  AccountReceivable AccountReceivable[]
}

model Recurrence {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime?
  dueDay      Int       @default(1)
  frequency   String
  amount      Float
  description String?

  status String @default("active") // 'active', 'finished', 'overdue', etc.

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  transactions   Transaction[]
  AccountPayable AccountPayable[]
}

model DailyCash {
  id            String   @id @default(uuid())
  date          DateTime @unique
  openingAmount Float    @default(0)
  closingAmount Float?
  notes         String?
  createdById   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

model AccountPayable {
  id          String   @id @default(uuid())
  dueDate     DateTime
  amount      Float
  description String

  attachmentUrl String?

  paid   Boolean   @default(false)
  paidAt DateTime?

  recurrenceId String?
  recurrence   Recurrence? @relation(fields: [recurrenceId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LogEntry {
  id          String   @id @default(uuid())
  action      String // 'CREATE', 'UPDATE', 'DELETE'
  entity      String // 'AccountPayable', 'Transaction', etc.
  entityId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String?
  createdAt   DateTime @default(now())
}

model AccountReceivable {
  id          String   @id @default(uuid())
  dueDate     DateTime
  amount      Float
  description String

  received   Boolean   @default(false)
  receivedAt DateTime?

  memberId String?
  member   Member? @relation(fields: [memberId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
